/*
# parameters

```yaml
project:
    pipeline: 
        mode: immutable # immutable/mutable
        branch: pipeline-config # repository branch
```
*/

def _global = [
    libraryUrl: "https://github.com/opsbox-dev/oes-jenkins-library.git",
    opsboxPipelineFile: ".opsbox/pipeline.yaml",
    pipelineDefaultBranch: "pipeline-config"
]

def _project = [
    pipeline: [:]
]

def _pipeline = [
    mode: "immutable",
    branch: _global.pipelineDefaultBranch,
    variables: [:],
    secrets: [:],
    stages: []
]

library identifier: 'objl@master', retriever: modernSCM(
  [$class: 'GitSCMSource',
   remote: _global.libraryUrl])

properties([
    disableConcurrentBuilds(abortPrevious: true),
    buildDiscarder(logRotator(numToKeepStr: '20')),
])

node {

    stage ('init') {

        try {
            _ = project
        } catch (e) {
            error("--//ERR: project variable is not set.")
        }

        _project.putAll(project)
        _pipeline.putAll(_project.pipeline)

        // clone project code
        checkout scm

        if (_pipeline.mode == "mutable" && fileExists(_global.opsboxPipelineFile)) {
            echo "--//INFO: mode>> mutable, branch>> ${env.BRANCH_NAME}"
        } else {
            echo "--//INFO: mode>> immutable, branch>> ${project.pipeline.branch}"
            // checkout pipeline config
            checkoutConfig(_project.pipeline)
        }
    }

    pipelineFile(_global.opsboxPipelineFile, _pipeline.variables)
}

def checkoutConfig(pipeline) {
    // clone pipeline code
    def _tmplClonePath = ".pipeline"
    def _tmplCheckoutPath = ".opsbox"

    checkout changelog: false, poll: false, 
        scm: [
            $class: 'GitSCM', 
            branches: [[name: pipeline.branch]], 
            extensions: [
                [$class: 'CleanBeforeCheckout', deleteUntrackedNestedRepositories: true],
                [$class: 'RelativeTargetDirectory', relativeTargetDir: _tmplClonePath],
                [$class: 'CloneOption', depth: 1, noTags: true, reference: '', shallow: true], 
                [$class: 'SparseCheckoutPaths', sparseCheckoutPaths: [[path: _tmplCheckoutPath]]]
            ], 
            userRemoteConfigs: scm.userRemoteConfigs
        ]

    // sync template .opsbox to workspace
    sh "rsync -av --delete ${_tmplClonePath}/.opsbox ."
}
